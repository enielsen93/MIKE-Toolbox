import os
import numpy as np
import re

class Toolbox(object):
    def __init__(self):
        self.label = "Set Definition Query to Selection"
        self.alias = "Set Definition Query to Selection"
        self.canRunInBackground = True
        # List of tool classes associated with this toolbox
        self.tools = [SetDefinitionQuery]


class SetDefinitionQuery(object):
    def __init__(self):
        self.label = "Set Definition Query to Selection"
        self.description = "Set Definition Query to Selection"
        self.canRunInBackground = False



    def getParameterInfo(self):
        # Define parameter definitions

        layer = arcpy.Parameter(
            displayName="Layer",
            name="folder",
            datatype="GPFeatureLayer",
            parameterType="Required",
            multiValue = True,
            direction="Input")

        append = arcpy.Parameter(
            displayName="Append to existing Definition Query",
            name="append",
            datatype="GPBoolean",
            parameterType="Optional",
            direction="Input")

        remove_selection = arcpy.Parameter(
            displayName="Remove from filter instead",
            name="remove_selection",
            datatype="GPBoolean",
            parameterType="Optional",
            direction="Input")

        parameters = [layer, append, remove_selection]
        return parameters

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        if not parameters[0].Values:
            mxd = arcpy.mapping.MapDocument("CURRENT")

            layers = [lyr.longName for lyr in arcpy.mapping.ListLayers(mxd) if
                     lyr.getSelectionSet()]
            if layers:
                parameters[0].value = layers

        return

    def updateMessages(self, parameters):  # optional
        return

    def execute(self, parameters, messages):
        layers = parameters[0].Values
        append = parameters[1].Value
        remove_selection = parameters[2].Value

        for layer in layers:
            oid_fieldname = arcpy.Describe(layer).OIDFieldName
            # arcpy.AddMessage([row for row in arcpy.da.SearchCursor(layer, ["muid"], where_clause = "objectid IN (%s)" % (", ".join([str(l) for l in layer.getSelectionSet()])))])
            # arcpy.AddMessage("objectid IN (%s)" % (", ".join([str(l) for l in layer.getSelectionSet()])))
            if "muid" in [field.name.lower() for field in arcpy.ListFields(layer)]:
                new_definition_query = "muid %sIN ('%s')" % ("NOT " if remove_selection else "", "', '".join([row[0] for row in arcpy.da.SearchCursor(layer, ["muid"], where_clause = "%s IN (%s)" % (oid_fieldname, ", ".join([str(l) for l in layer.getSelectionSet()])))]))
            else:
                new_definition_query = "%s %sIN (%s)" % ("NOT " if remove_selection else "", oid_fieldname, ", ".join(layer.getSelectionSet))


            old_definition_query = layer.definitionQuery
            if old_definition_query and not append:
                layer.definitionQuery = old_definition_query + " AND " + new_definition_query
            else:
                layer.definitionQuery = new_definition_query


        return
