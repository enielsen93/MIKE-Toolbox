# Tool for reading DFS0 or KM2 files and creating LTS files from it
# Created by Emil Nielsen
# Contact: 
# E-mail: enielsen93@hotmail.com

import os
import sys
import numpy as np
import sqlite3

class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file)."""
        self.label = "SQLITE Field Calculator"
        self.alias = ""

        # List of tool classes associated with this toolbox
        self.tools = [FieldCalculator]
    
    
class FieldCalculator(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Calculate Field"
        self.description = "Calculate Field"
        self.canRunInBackground = True

    def getParameterInfo(self):
        #Define parameter definitions
        featureclass = arcpy.Parameter(
            displayName="Feature Class",
            name="featureclass",
            datatype="GPFeatureLayer",
            parameterType="Required",
            direction="Input")
        
        field = arcpy.Parameter(
			displayName= "Field to assign value to",
			name="field",
			datatype="GPString",
			parameterType="Required",
			direction="Input")
        
        value = arcpy.Parameter(
            displayName="Value",
            name="value",
            datatype="GPString",
            parameterType="Required",
            direction="Input")
        
        params = [featureclass, field, value]

        return params

    def isLicensed(self):
        return True

    def updateParameters(self, parameters):
        if parameters[0].Value and not parameters[1].Value:
            parameters[1].filter.list = [f.name for f in arcpy.Describe(parameters[0].Value).fields]
        return

    def updateMessages(self, parameters):
        return

    def execute(self, parameters, messages):
        featureclass = parameters[0].Value
        field = parameters[1].ValueAsText
        value = parameters[2].ValueAsText
        
        MU_database = os.path.dirname(arcpy.Describe(featureclass).catalogPath).replace("\mu_Geometry", "")
        featureclass_name = arcpy.Describe(featureclass).name
            
        with sqlite3.connect(
                    MU_database) as connection:
                update_cursor = connection.cursor()    
            update_cursor.execute(
                                "UPDATE %s SET %s = %s WHERE MUID = '%s'" % (featureclass_name, field, value, ('%s')" % ("','".join(selected_pipes))
        return
        